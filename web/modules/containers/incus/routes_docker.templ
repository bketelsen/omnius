package incus

import (
	"fmt"
	"github.com/bketelsen/omnius/web/components"
	"github.com/bketelsen/omnius/web/layouts"
	"github.com/docker/docker/api/types"
	datastar "github.com/starfederation/datastar/code/go/sdk"
	"strings"
)

templ IncusPage(sidebarGroups []*layouts.SidebarGroup) {
	@layouts.Page(sidebarGroups) {
		<div data-on-load="$get('/incus/poll')">
			@components.CardGallery() {
				@IncusDetail()
				@ImageOverview()
			}
		</div>
	}
}

templ IncusOverview() {
	@components.OverviewCard("Incus", "/incus") {
		@IncusOverviewCard()
	}
}

templ IncusOverviewCard() {
	<div id="incusoverview">
		@components.Stats() {
			@components.Stat("Active Containers", "5", "")
		}
	</div>
}

templ IncusDetail() {
	@components.DetailCard("Incus Instances", "/incus") {
		@IncusContainer()
	}
}

templ ImageOverview() {
	@components.DetailCard("Incus Images", "/incus/images") {
		@IncusImages()
	}
}

templ IncusContainer() {
	<div id="dockercontainers" class="overflow-x-auto">
		<table class="table">
			<!-- head -->
			<thead>
				<tr>
					<th></th>
					<th>ID</th>
					<th>Image</th>
					<th>Status</th>
					<th>Names</th>
					<th>Ports</th>
					<th>Actions</th>
				</tr>
			</thead>
			// <tbody>
			// 	for _, container := range containers {
			// 		<!-- row 1 -->
			// 		<tr>
			// 			<th></th>
			// 			<td>{ container.ID[0:12] }</td>
			// 			<td>{ container.Image }</td>
			// 			<td>{ container.Status }</td>
			// 			<td>
			// 				{ names(container.Names) }
			// 			</td>
			// 			<td>
			// 				{ ports(container.Ports) }
			// 			</td>
			// 			<td>
			// 				<div class="join">
			// 					@pauseButton(container)
			// 					@startButton(container)
			// 				</div>
			// 			</td>
			// 		</tr>
			// 	}
			// </tbody>
		</table>
	</div>
}

templ IncusImages() {
	<div id="incusimages" class="overflow-x-auto">
		<table class="table">
			<!-- head -->
			<thead>
				<tr>
					<th></th>
					<th>ID</th>
					<th>Image</th>
					<th>Status</th>
					<th>Actions</th>
				</tr>
			</thead>
		</table>
	</div>
}

templ pauseButton(container types.Container) {
	if container.State == "paused" {
		<button class="join-item btn btn-xs btn-warning" data-on-click={ datastar.PostSSE("/docker/api/" + container.ID + "/unpause") }>Unpause</button>
	} else {
		<button class="join-item btn btn-xs btn-warning " data-on-click={ datastar.PostSSE("/docker/api/" + container.ID + "/pause") }>Pause</button>
	}
}

templ startButton(container types.Container) {
	<button class="join-item btn btn-xs btn-error " data-on-click={ datastar.PostSSE("/docker/api/" + container.ID + "/stop") }>Stop</button>
}

func names(ctnames []string) string {

	stripped := []string{}
	for _, n := range ctnames {
		strippedName := strings.TrimPrefix(n, "/")
		stripped = append(stripped, strippedName)
	}
	return strings.Join(stripped, ", ")
}
func ports(ctports []types.Port) string {

	stripped := []string{}
	for _, n := range ctports {
		show := fmt.Sprintf("%s/%s:%d-%d", n.Type, n.IP, n.PublicPort, n.PrivatePort)
		stripped = append(stripped, show)
	}
	return strings.Join(stripped, ", ")
}
