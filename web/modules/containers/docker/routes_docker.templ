package docker

import (
	"fmt"
	"github.com/bketelsen/omnius/web/components"
	"github.com/bketelsen/omnius/web/layouts"
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/image"
	datastar "github.com/starfederation/datastar/sdk/go"
	"strconv"
	"strings"
)

templ DockerPage(sidebarGroups []*layouts.SidebarGroup, containers []types.Container, images []image.Summary) {
	@layouts.Page(sidebarGroups) {
		<div data-on-load="sse('/docker/poll')">
			@components.CardGallery() {
				@DockerDetail(containers)
				@ImageOverview(images)
			}
		</div>
	}
}

templ DockerOverview(containers []types.Container) {
	@components.OverviewCard("Docker", "/docker") {
		@DockerOverviewCard(containers)
	}
}

templ DockerOverviewCard(containers []types.Container) {
	<div id="dockeroverview">
		@components.Stats() {
			@components.Stat("Active Containers", strconv.Itoa(len(containers)), "")
		}
	</div>
}

templ DockerDetail(containers []types.Container) {
	<div id="dockerdetail">
		@components.DetailCard("Docker Containers", "/docker") {
			@DockerContainer(containers)
		}
	</div>
}

templ ImageOverview(images []image.Summary) {
	<div id="imageoverview">
		@components.DetailCard("Docker Images", "/docker/images") {
			@DockerImages(images)
		}
	</div>
}

templ DockerContainer(containers []types.Container) {
	<div id="dockercontainers" class="overflow-x-auto">
		<table class="table">
			<!-- head -->
			<thead>
				<tr>
					<th></th>
					<th>ID</th>
					<th>Image</th>
					<th>Status</th>
					<th>Names</th>
					<th>Ports</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				for _, container := range containers {
					<!-- row 1 -->
					<tr>
						<th></th>
						<td>{ container.ID[0:12] }</td>
						<td>{ container.Image }</td>
						<td>{ container.Status }</td>
						<td>
							{ names(container.Names) }
						</td>
						<td>
							{ ports(container.Ports) }
						</td>
						<td>
							<div class="join">
								@pauseButton(container)
								@startButton(container)
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ DockerImages(images []image.Summary) {
	<div id="dockerimages" class="overflow-x-auto">
		<table class="table">
			<!-- head -->
			<thead>
				<tr>
					<th></th>
					<th>ID</th>
					<th>Image</th>
					<th>Repo/Tags</th>
					<th>Size</th>
				</tr>
			</thead>
			<tbody>
				for _, image := range images {
					<!-- row 1 -->
					<tr>
						<th></th>
						<td>{ image.ID[0:12] }</td>
						<td></td>
						<td>{ image.RepoTags[0] }</td>
						<td>{ fmt.Sprintf("%d", image.Size) }</td>
						// <td>
						// 	<div class="join"></div>
						// </td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ pauseButton(container types.Container) {
	if container.State == "paused" {
		<button class="join-item btn btn-xs btn-warning" data-on-click={ datastar.PostSSE("/docker/api/" + container.ID + "/unpause") }>Unpause</button>
	} else {
		<button class="join-item btn btn-xs btn-warning " data-on-click={ datastar.PostSSE("/docker/api/" + container.ID + "/pause") }>Pause</button>
	}
}

templ startButton(container types.Container) {
	<button class="join-item btn btn-xs btn-error " data-on-click={ datastar.PostSSE("/docker/api/" + container.ID + "/stop") }>Stop</button>
}

func names(ctnames []string) string {

	stripped := []string{}
	for _, n := range ctnames {
		strippedName := strings.TrimPrefix(n, "/")
		stripped = append(stripped, strippedName)
	}
	return strings.Join(stripped, ", ")
}
func ports(ctports []types.Port) string {

	stripped := []string{}
	for _, n := range ctports {
		show := fmt.Sprintf("%s/%s:%d-%d", n.Type, n.IP, n.PublicPort, n.PrivatePort)
		stripped = append(stripped, show)
	}
	return strings.Join(stripped, ", ")
}
