package system

import (
	"fmt"
	"github.com/bketelsen/omnius/web/components"
	"github.com/bketelsen/omnius/web/layouts"
	"github.com/bketelsen/omnius/web/modules/containers/docker"
	"github.com/bketelsen/omnius/web/modules/containers/incus"
	"github.com/bketelsen/omnius/web/modules/system/logs"
	"github.com/bketelsen/omnius/web/modules/system/networking"
	"github.com/bketelsen/omnius/web/modules/system/services"
	"github.com/bketelsen/omnius/web/modules/system/storage"
	"github.com/coreos/go-systemd/v22/dbus"
	"github.com/docker/docker/api/types"
	"github.com/shirou/gopsutil/v4/mem"
	"strconv"
)

templ SystemPage(groups []*layouts.SidebarGroup, c CPUSimple, v *mem.VirtualMemoryStat, containers []types.Container) {
	@layouts.Page(groups) {
		<div data-on-load="sse('/overview/poll')">
			@components.CardGallery() {
				@CPUDetail(c)
				@MemoryDetail(v)
				@logs.LogOverview()
				@services.ServiceOverview([]dbus.UnitStatus{})
				@storage.StorageOverview()
				@networking.NetworkOverview([]types.Container{})
				@docker.DockerOverview(containers)
				@incus.IncusOverview()
			}
		</div>
	}
}

templ SystemOverview() {
	@components.OverviewCard("System", "/overview")
}

templ CPUDetail(c CPUSimple) {
	@components.DetailCard("CPU", "cpu") {
		@cpuDetailCard(c)
	}
}

templ MemoryDetail(v *mem.VirtualMemoryStat) {
	@components.DetailCard("Memory", "memory") {
		@memoryDetailCard(v)
	}
}

templ memoryDetailCard(v *mem.VirtualMemoryStat) {
	<div id="memory">
		@components.Stats() {
			@components.Stat("Total Memory", ByteCountIEC(v.Total), "")
			@components.Stat("Used Memory", ByteCountIEC(v.Used), "")
		}
	</div>
}

templ cpuDetailCard(c CPUSimple) {
	<div id="cpu">
		@components.Stats() {
			@components.Stat("Cores", strconv.Itoa(c.Cores), "")
			@components.Stat("Usage", c.Used, "Percent")
		}
		<div>
			0<progress class="progress progress-error w-56" value={ c.UsedPercent } max="100"></progress>100
		</div>
	</div>
}

func ByteCountSI(b uint64) string {
	const unit = 1000
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := int64(unit), 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB",
		float64(b)/float64(div), "kMGTPE"[exp])
}

func ByteCountIEC(b uint64) string {
	const unit = 1024
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := int64(unit), 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %ciB",
		float64(b)/float64(div), "KMGTPE"[exp])
}
