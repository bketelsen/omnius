package system

import (
	"fmt"
	"github.com/bketelsen/omnius/web/components"
	"github.com/bketelsen/omnius/web/layouts"
	"github.com/bketelsen/omnius/web/modules/containers/docker"
	"github.com/bketelsen/omnius/web/modules/containers/incus"
	"github.com/bketelsen/omnius/web/modules/system/logs"
	"github.com/bketelsen/omnius/web/modules/system/networking"
	"github.com/bketelsen/omnius/web/modules/system/services"
	"github.com/bketelsen/omnius/web/modules/system/storage"
	"github.com/coreos/go-systemd/v22/dbus"
	"github.com/docker/docker/api/types"
	"github.com/shirou/gopsutil/v4/mem"
	"net/http"
)

type SystemMonitorSignals struct {
	MemTotal       string `json:"memTotal,omitempty"`
	MemUsed        string `json:"memUsed,omitempty"`
	MemUsedPercent string `json:"memUsedPercent,omitempty"`
	CpuUser        string `json:"cpuUser,omitempty"`
	CpuSystem      string `json:"cpuSystem,omitempty"`
	CpuIdle        string `json:"cpuIdle,omitempty"`
	Cores          string `json:"cores,omitempty"`
	Usage          string `json:"usage,omitempty"`
	UsedPercent    string `json:"usedPercent,omitempty"`
}

templ SystemPage(r *http.Request, u string, groups []*layouts.SidebarGroup, c CPUSimple, v *mem.VirtualMemoryStat, containers []types.Container) {
	@layouts.Page(r, u, groups) {
		<div
			data-on-load="sse('/overview/poll')"
			data-signals="{memTotal:'', memUsed:'', memUsedPercent:'', cpuUser:'', cpuSystem:'', cpuIdle:'', cores:'', usage:'', usedPercent:''}"
		>
			@components.CardGallery() {
				@CPUDetail()
				@MemoryDetail()
				@logs.LogOverview()
				@services.ServiceOverview([]dbus.UnitStatus{})
				@storage.StorageOverview()
				@networking.NetworkOverview([]types.Container{})
				@docker.DockerOverview(containers)
				@incus.IncusOverview()
			}
		</div>
	}
}

templ SystemOverview() {
	@components.OverviewCard("System", "/overview")
}

templ CPUDetail() {
	@components.DetailCard("CPU", "cpu") {
		@cpuDetailCard()
	}
}

templ MemoryDetail() {
	@components.DetailCard("Memory", "memory") {
		@memoryDetailCard()
	}
}

templ memoryDetailCard() {
	<div id="memory">
		<div class="stats shadow">
			<div class="stat">
				<div class="stat-title">Total Memory</div>
				<div class="stat-value"><span data-text="memTotal.value"></span></div>
			</div>
			<div class="stat">
				<div class="stat-title">Used Memory</div>
				<div class="stat-value"><span data-text="memUsed.value"></span></div>
			</div>
		</div>
		<div>
			0<progress class="progress progress-error w-56" data-attributes-value="memUsedPercent.value" max="100"></progress>100
		</div>
	</div>
}

templ cpuDetailCard() {
	<div id="cpu">
		<div class="stats shadow">
			<div class="stat">
				<div class="stat-title">Cores</div>
				<div class="stat-value"><span data-text="cores.value"></span></div>
				<div class="stat-desc">CPU Cores</div>
			</div>
			<div class="stat">
				<div class="stat-title">Usage</div>
				<div class="stat-value"><span data-text="usage.value"></span>%</div>
				<div class="stat-desc">percent</div>
			</div>
		</div>
		<div>
			0<progress class="progress progress-error w-56" data-attributes-value="usedPercent.value" max="100"></progress>100
		</div>
	</div>
}

func ByteCountSI(b uint64) string {
	const unit = 1000
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := int64(unit), 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB",
		float64(b)/float64(div), "kMGTPE"[exp])
}

func ByteCountIEC(b uint64) string {
	const unit = 1024
	if b < unit {
		return fmt.Sprintf("%d B", b)
	}
	div, exp := int64(unit), 0
	for n := b / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %ciB",
		float64(b)/float64(div), "KMGTPE"[exp])
}
